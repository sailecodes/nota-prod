/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const { Decimal, objectEnumValues, makeStrictEnum, Public, getRuntime, skip } = require("./runtime/index-browser.js");

const Prisma = {};

exports.Prisma = Prisma;
exports.$Enums = {};

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed",
};

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.Decimal = Decimal;

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.validator = Public.validator;

/**
 * Extensions
 */
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`);
};

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull;
Prisma.JsonNull = objectEnumValues.instances.JsonNull;
Prisma.AnyNull = objectEnumValues.instances.AnyNull;

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull,
};

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: "ReadUncommitted",
  ReadCommitted: "ReadCommitted",
  RepeatableRead: "RepeatableRead",
  Serializable: "Serializable",
});

exports.Prisma.UserScalarFieldEnum = {
  id: "id",
  sbId: "sbId",
  email: "email",
  username: "username",
  firstName: "firstName",
  lastName: "lastName",
  totalMonthlyUploads: "totalMonthlyUploads",
  subscription: "subscription",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.TeamScalarFieldEnum = {
  id: "id",
  name: "name",
  organization: "organization",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.RoleScalarFieldEnum = {
  id: "id",
  userId: "userId",
  type: "type",
  teamId: "teamId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.UploadScalarFieldEnum = {
  id: "id",
  title: "title",
  fileUrl: "fileUrl",
  processStatus: "processStatus",
  uploaderId: "uploaderId",
  teamId: "teamId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.ResultScalarFieldEnum = {
  id: "id",
  summary: "summary",
  transcript: "transcript",
  insights: "insights",
  uploadId: "uploadId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.ActionItemScalarFieldEnum = {
  id: "id",
  action: "action",
  assigneeId: "assigneeId",
  dueDate: "dueDate",
  dueStatus: "dueStatus",
  resultId: "resultId",
  createdAt: "createdAt",
  updatedAt: "updatedAt",
};

exports.Prisma.SortOrder = {
  asc: "asc",
  desc: "desc",
};

exports.Prisma.QueryMode = {
  default: "default",
  insensitive: "insensitive",
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: "id",
  sbId: "sbId",
  email: "email",
  username: "username",
  firstName: "firstName",
  lastName: "lastName",
};

exports.Prisma.NullsOrder = {
  first: "first",
  last: "last",
};

exports.Prisma.TeamOrderByRelevanceFieldEnum = {
  id: "id",
  name: "name",
  organization: "organization",
};

exports.Prisma.RoleOrderByRelevanceFieldEnum = {
  id: "id",
  userId: "userId",
  teamId: "teamId",
};

exports.Prisma.UploadOrderByRelevanceFieldEnum = {
  id: "id",
  title: "title",
  fileUrl: "fileUrl",
  uploaderId: "uploaderId",
  teamId: "teamId",
};

exports.Prisma.ResultOrderByRelevanceFieldEnum = {
  id: "id",
  summary: "summary",
  transcript: "transcript",
  insights: "insights",
  uploadId: "uploadId",
};

exports.Prisma.ActionItemOrderByRelevanceFieldEnum = {
  id: "id",
  action: "action",
  assigneeId: "assigneeId",
  resultId: "resultId",
};
exports.Subscription = exports.$Enums.Subscription = {
  STARTER: "STARTER",
  TEAM: "TEAM",
  ORGANIZATION: "ORGANIZATION",
};

exports.RoleType = exports.$Enums.RoleType = {
  MEMBER: "MEMBER",
  LEAD: "LEAD",
};

exports.ProcessStatus = exports.$Enums.ProcessStatus = {
  TRANSCRIBING: "TRANSCRIBING",
  SUMMARIZING: "SUMMARIZING",
  COMPLETED: "COMPLETED",
  FAILED: "FAILED",
};

exports.DueStatus = exports.$Enums.DueStatus = {
  TBD: "TBD",
  NEW: "NEW",
  UPCOMING: "UPCOMING",
  DUE_SOON: "DUE_SOON",
  COMPLETED: "COMPLETED",
  OVERDUE: "OVERDUE",
};

exports.Prisma.ModelName = {
  User: "User",
  Team: "Team",
  Role: "Role",
  Upload: "Upload",
  Result: "Result",
  ActionItem: "ActionItem",
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message;
        const runtime = getRuntime();
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message =
            "PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `" +
            runtime.prettyName +
            "`).";
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`;

        throw new Error(message);
      },
    });
  }
}

exports.PrismaClient = PrismaClient;

Object.assign(exports, Prisma);
